import { Utils } from '@technote-space/github-action-helper';
import { VERSION_BUMP } from '../constant';
import { getCommits } from './commit';
import { log } from './misc';
export const getCurrentVersion = async (helper) => helper.getLastTag();
export const whatBump = (minorUpdateCommitTypes, commits) => {
    if (commits.filter(commit => commit.notes.length).length) {
        return 'major';
    }
    if (minorUpdateCommitTypes.length && commits.filter(commit => commit.type && minorUpdateCommitTypes.includes(commit.type)).length) {
        return 'minor';
    }
    return 'patch';
};
export const getNextVersionLevel = (minorUpdateCommitTypes, commits) => VERSION_BUMP[whatBump(minorUpdateCommitTypes, commits)];
export const getNextVersion = async (minorUpdateCommitTypes, excludeMessages, breakingChangeNotes, helper, octokit, context, logger) => {
    const commits = await getCommits(minorUpdateCommitTypes, excludeMessages, breakingChangeNotes, octokit, context);
    log(logger => logger.startProcess('Target commits:'), logger);
    log(() => console.log(commits
        .filter(item => item.notes.length || item.type)
        .map(item => ({
        type: item.type,
        message: item.message,
        notes: item.notes,
        sha: item.sha,
    }))), logger);
    log(logger => logger.endProcess(), logger);
    const current = await getCurrentVersion(helper);
    log(logger => logger.info('Current version: %s', current), logger);
    const next = Utils.generateNewVersion(current, getNextVersionLevel(minorUpdateCommitTypes, commits));
    log(logger => logger.info('Next version: %s', next), logger);
    return next;
};
