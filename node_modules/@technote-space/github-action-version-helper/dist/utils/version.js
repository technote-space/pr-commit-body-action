"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const github_action_helper_1 = require("@technote-space/github-action-helper");
const commit_1 = require("./commit");
const constant_1 = require("../constant");
exports.getCurrentVersion = (helper) => __awaiter(void 0, void 0, void 0, function* () { return helper.getLastTag(); });
exports.whatBump = (minorUpdateCommitTypes, commits) => {
    if (commits.filter(commit => commit.notes.length).length) {
        return 'major';
    }
    if (minorUpdateCommitTypes.length && commits.filter(commit => minorUpdateCommitTypes.includes(commit.type)).length) {
        return 'minor';
    }
    return 'patch';
};
exports.getNextVersionLevel = (minorUpdateCommitTypes, commits) => constant_1.VERSION_BUMP[exports.whatBump(minorUpdateCommitTypes, commits)];
exports.getNextVersion = (minorUpdateCommitTypes, excludeMessages, breakingChangeNotes, helper, octokit, context) => __awaiter(void 0, void 0, void 0, function* () {
    return github_action_helper_1.Utils.generateNewVersion(yield exports.getCurrentVersion(helper), exports.getNextVersionLevel(minorUpdateCommitTypes, yield commit_1.getCommits(minorUpdateCommitTypes, excludeMessages, breakingChangeNotes, octokit, context)));
});
//# sourceMappingURL=version.js.map