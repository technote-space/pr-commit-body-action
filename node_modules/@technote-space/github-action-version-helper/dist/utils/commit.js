"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const misc_1 = require("./misc");
const constant_1 = require("../constant");
const listCommits = (octokit, context) => __awaiter(void 0, void 0, void 0, function* () {
    return octokit.paginate(octokit.pulls.listCommits.endpoint.merge(Object.assign(Object.assign({}, context.repo), { 'pull_number': context.payload.number })));
});
exports.getCommits = (types, excludeMessages, breakingChangeNotes, octokit, context) => __awaiter(void 0, void 0, void 0, function* () {
    return (yield listCommits(octokit, context))
        .filter(commit => !constant_1.MERGE_MESSAGE_PATTERN.test(commit.commit.message))
        .map(commit => ({ commit, message: misc_1.parseCommitMessage(commit.commit.message, types, excludeMessages, breakingChangeNotes) }))
        .filter(item => item.message)
        .map(item => (Object.assign({ sha: item.commit.sha }, item.message)));
});
//# sourceMappingURL=commit.js.map