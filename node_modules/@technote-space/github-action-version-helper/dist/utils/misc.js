"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const constant_1 = require("../constant");
exports.parseLine = (message) => {
    const trim = message.trim();
    const matches = trim.match(constant_1.SEMANTIC_MESSAGE_PATTERN);
    if (!matches) {
        return undefined;
    }
    return {
        type: matches[1],
        message: matches[3],
        normalized: `${matches[1]}: ${matches[3]}`,
        original: trim,
    };
};
exports.normalize = (messages) => messages.map(item => item.toLowerCase());
exports.isValidMessage = (type, message, types, excludeMessages) => types.includes(type) && !excludeMessages.includes(message.toLowerCase());
exports.parseCommitMessage = (message, types, excludeMessages, breakingChangeNotes) => {
    const normalizedExcludeMessages = exports.normalize(excludeMessages);
    const messages = message.trim().split(/\r?\n|\r/);
    const trim = messages[0].trim();
    const matches = trim.match(constant_1.SEMANTIC_MESSAGE_PATTERN);
    if (!matches || !exports.isValidMessage(matches[1], matches[3], types, normalizedExcludeMessages)) {
        return undefined;
    }
    const notes = [];
    const children = [];
    messages
        .slice(1) // eslint-disable-line no-magic-numbers
        .map(message => exports.parseLine(message))
        .filter(item => item)
        .map(item => item)
        .forEach(item => {
        if (breakingChangeNotes.length && breakingChangeNotes.includes(item.type)) {
            notes.push(item.original);
        }
        else if (exports.isValidMessage(item.type, item.message, types, normalizedExcludeMessages)) {
            children.push(item);
        }
    });
    return {
        type: matches[1],
        message: matches[3],
        normalized: `${matches[1]}: ${matches[3]}`,
        original: trim,
        children,
        notes,
    };
};
//# sourceMappingURL=misc.js.map